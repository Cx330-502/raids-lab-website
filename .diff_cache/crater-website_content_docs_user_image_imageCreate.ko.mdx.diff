diff --git crater-website/content/docs/user/image/imageCreate.ko.mdx crater-website/content/docs/user/image/imageCreate.ko.mdx
index 1b07fe9..e54fd69 100644
--- crater-website/content/docs/user/image/imageCreate.ko.mdx
+++ crater-website/content/docs/user/image/imageCreate.ko.mdx
@@ -42,7 +42,7 @@ description: 사용자가 자신만의 이미지를 커스터마이징하기 편
 - 이미지 설명 및 링크
 - 지원하는 아키텍처 정보
 - 생성 시간
-- 빌드 상태(대기 중, 빌드 중, 성공, 실패)
+- 빌드 상태 (대기 중, 빌드 중, 성공, 실패)
 - 이미지 크기
 
 ![Image](./img/imagebuild-task-list.png)
@@ -54,7 +54,7 @@ description: 사용자가 자신만의 이미지를 커스터마이징하기 편
 1. **Python+CUDA 커스텀 빌드** 🐍 - 딥러닝 및 과학 계산 시나리오에 적합
 2. **기존 이미지 기반 빌드** 📦 - 플랫폼에서 제공하는 기본 이미지에서 빠르게 커스터마이징
 3. **Dockerfile 기반 빌드** 🐳 - 최대의 유연성과 제어 능력을 제공
-4. **Envd 기반 빌드** ⚡ - Python과 유사한 문법의 선언형 빌드
+4. **Envd 기반 빌드** ⚡ - Python 과 유사한 문법의 선언형 빌드
 
 페이지 상단 오른쪽의 빌드 방식 드롭다운 버튼을 클릭하여 원하는 빌드 방식을 선택하고, 버튼을 클릭하여 해당 빌드 폼을 열 수 있습니다.
 
@@ -68,11 +68,11 @@ description: 사용자가 자신만의 이미지를 커스터마이징하기 편
 
 ![Image](./img/imagebuild-homepage.png)
 
-페이지에 접속하면, 페이지 상단에서 이미지 빌드 기능을 통해 생성한 이미지의 총 수, Harbor 이미지 저장소의 사용량 및 제한, 그리고 Harbor 프로젝트 이름을 확인할 수 있습니다. Harbor의 해당 프로젝트에서 생성한 이미지를 확인할 수 있습니다.
+페이지에 접속하면, 페이지 상단에서 이미지 빌드 기능을 통해 생성한 이미지의 총 수, Harbor 이미지 저장소의 사용량 및 제한, 그리고 Harbor 프로젝트 이름을 확인할 수 있습니다. Harbor 의 해당 프로젝트에서 생성한 이미지를 확인할 수 있습니다.
 
-이미지 예시에서는 사용자가 로컬에서 생성한 이미지를 직접 업로드하여 "이미지 빌드" 기능을 통해 생성하지 않았기 때문에, 여기서 이미지 총 수가 0이지만, 저장 공간 사용량은 0이 아닙니다. 해당 내용은 "로컬 이미지 업로드" 문서를 참조하십시오.
+이미지 예시에서는 사용자가 로컬에서 생성한 이미지를 직접 업로드하여 "이미지 빌드" 기능을 통해 생성하지 않았기 때문에, 여기서 이미지 총 수가 0 이지만, 저장 공간 사용량은 0 이 아닙니다. 해당 내용은 "로컬 이미지 업로드" 문서를 참조하십시오.
 
-상단 오른쪽의 "초기 자격 증명 가져오기" 버튼은 Harbor의 사용자 이름과 비밀번호를 가져오는데 사용되어, Harbor 저장소에 직접 로그인하여 이미지를 수동으로 업로드하거나 저장소 내 이미지를 확인하는 데 편리합니다. 다만, 다시 클릭하면 비밀번호가 재설정될 수 있음을 주의하십시오.
+상단 오른쪽의 "초기 자격 증명 가져오기" 버튼은 Harbor 의 사용자 이름과 비밀번호를 가져오는데 사용되어, Harbor 저장소에 직접 로그인하여 이미지를 수동으로 업로드하거나 저장소 내 이미지를 확인하는 데 편리합니다. 다만, 다시 클릭하면 비밀번호가 재설정될 수 있음을 주의하십시오.
 
 ## 이미지 빌드 방식 선택
 
@@ -120,7 +120,7 @@ description: 사용자가 자신만의 이미지를 커스터마이징하기 편
 
 **버전 선택 권장 사항**
 - Python 3.9 + CUDA 11.8: 호환성이 최고로, 대부분의 딥러닝 프레임워크에 적합 ✅
-- Python 3.10 + CUDA 12.1: 성능 최적화, 최신 PyTorch 및 TensorFlow에 적합 ⚡
+- Python 3.10 + CUDA 12.1: 성능 최적화, 최신 PyTorch 및 TensorFlow 에 적합 ⚡
 - Python 3.11 + CUDA 12.4: 최신 기능, 최첨단 연구에 적합 🔬
 
 **일반적인 패키지 조합**
@@ -157,11 +157,11 @@ seaborn>=0.11.0
 
 ![Image](./img/imagebuild-package.png)
 
-예를 들어, 실행할 프로젝트에 requirements.txt 파일이 포함되어 있다면, 이 파일의 내용을 Python 종속성 영역에 복사하여 설치할 수 있습니다. 다만, pip가 종속성을 파싱하는 과정에서 해결할 수 없는 문제가 발생할 수 있으므로, 먼저 컨테이너 내에서 종속성을 수동으로 설치해보고, 그 결과에 따라 종속성을 입력하는 것이 좋습니다. 위 그림은 폼 작성 예시입니다. 폼 작성 후, 폼의 우하단 "시작 빌드"를 클릭하여 이미지 빌드를 시작할 수 있습니다.
+예를 들어, 실행할 프로젝트에 requirements.txt 파일이 포함되어 있다면, 이 파일의 내용을 Python 종속성 영역에 복사하여 설치할 수 있습니다. 다만, pip 가 종속성을 파싱하는 과정에서 해결할 수 없는 문제가 발생할 수 있으므로, 먼저 컨테이너 내에서 종속성을 수동으로 설치해보고, 그 결과에 따라 종속성을 입력하는 것이 좋습니다. 위 그림은 폼 작성 예시입니다. 폼 작성 후, 폼의 우하단 "시작 빌드"를 클릭하여 이미지 빌드를 시작할 수 있습니다.
 
 ### 3. Dockerfile 기반 빌드 🐳
 
-고도의 커스터마이징이 필요한 사용자에게 최대의 유연성을 제공합니다. 완전한 Dockerfile을 작성하여 이미지 빌드 과정을 정확하게 제어할 수 있습니다.
+고도의 커스터마이징이 필요한 사용자에게 최대의 유연성을 제공합니다. 완전한 Dockerfile 을 작성하여 이미지 빌드 과정을 정확하게 제어할 수 있습니다.
 
 ![Image](./img/imagebuild-dockerfile.png)
 
@@ -232,7 +232,7 @@ RUN mkdir -p /workspace/data && \
 
 ### 4. Envd 기반 빌드 ⚡
 
-Envd는 Python과 유사한 문법을 사용하는 이미지 빌드 도구로, 학습 비용이 낮고 빌드 속도가 빠르며, 특히 딥러닝 사용자에게 적합합니다.
+Envd 는 Python 과 유사한 문법을 사용하는 이미지 빌드 도구로, 학습 비용이 낮고 빌드 속도가 빠르며, 특히 딥러닝 사용자에게 적합합니다.
 
 ![Image](./img/imagebuild-envd-build.png)
 
@@ -303,11 +303,11 @@ def build():
 
 ![Image](./img/imagebuild-dockerfile-show.png)
 
-마지막으로, 이미지 빌드가 성공하면 해당 페이지에서 이미지 상태가 "성공"으로 표시되고, 생성된 이미지의 크기를 볼 수 있습니다. 주의할 점은 Docker의 계층형 저장 구조를 사용하기 때문에 실제 저장 공간 사용량이 각 이미지의 크기 총합보다 훨씬 작을 수 있다는 점입니다. 또한, "이미지 목록"에서 "Custom" 유형의 새로 생성한 이미지를 볼 수 있으며, 이를 통해 "배치 작업" 또는 "인터랙티브 작업"을 시작할 수 있습니다.
+마지막으로, 이미지 빌드가 성공하면 해당 페이지에서 이미지 상태가 "성공"으로 표시되고, 생성된 이미지의 크기를 볼 수 있습니다. 주의할 점은 Docker 의 계층형 저장 구조를 사용하기 때문에 실제 저장 공간 사용량이 각 이미지의 크기 총합보다 훨씬 작을 수 있다는 점입니다. 또한, "이미지 목록"에서 "Custom" 유형의 새로 생성한 이미지를 볼 수 있으며, 이를 통해 "배치 작업" 또는 "인터랙티브 작업"을 시작할 수 있습니다.
 
 ![Image](./img/imagebuild-list.png)
 
-이미지의 브라우징, 공유, 태깅, 임포트와 같은 작업에 대한 자세한 내용은 《[이미지 목록](./imagelist)》 문서를 참조하십시오.
+이미지의 브라우징, 공유, 태깅, 임포트와 같은 작업에 대한 자세한 내용은《[이미지 목록](./imagelist)》문서를 참조하십시오.
 
 ## 구성 파일의 임포트 및 내보내기 📥📤
 
