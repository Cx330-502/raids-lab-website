diff --git crater-website/content/docs/admin/quick-start.jp.mdx crater-website/content/docs/admin/quick-start.jp.mdx
index 097b692..cba6bb8 100644
--- crater-website/content/docs/admin/quick-start.jp.mdx
+++ crater-website/content/docs/admin/quick-start.jp.mdx
@@ -7,11 +7,11 @@ Crater プラットフォームは Kubernetes クラスターに依存して動
 
 最小限のデプロイメント方案では、できるだけコアで不可欠な依存のみを残し、複雑さを過剰に導入することを避けています。最終的に選定された依存は以下の通りです：
 
-- **NVIDIA GPU Operator**：GPUドライバ、デバイスプラグイン、モニタリングコンポーネントをインストールし、CraterがGPUタスクをスケジュールできるようにします。
-- **Bitnami PostgreSQL**：高可用性を考慮しないPostgreSQLデータベースサービスで、本方案ではCraterの外部データベースとして使用されます。
+- **NVIDIA GPU Operator**：GPU ドライバ、デバイスプラグイン、モニタリングコンポーネントをインストールし、Crater が GPU タスクをスケジュールできるようにします。
+- **Bitnami PostgreSQL**：高可用性を考慮しない PostgreSQL データベースサービスで、本方案では Crater の外部データベースとして使用されます。
 - **IngressClass (Ingress-Nginx)**：外部トラフィックのルーティングを処理し、ユーザーのリクエストをクラスター内のサービスに転送します。
-- **Volcano**：バッチ処理とAIワークロード向けのスケジューリングフレームワークで、Craterのジョブスケジューリングのコアです。
-- **StorageClass (NFS)**：データベースとHarborに永続ストレージ能力を提供する統一された分散ストレージバックエンド。
+- **Volcano**：バッチ処理と AI ワークロード向けのスケジューリングフレームワークで、Crater のジョブスケジューリングのコアです。
+- **StorageClass (NFS)**：データベースと Harbor に永続ストレージ能力を提供する統一された分散ストレージバックエンド。
 
 これらのコンポーネントを選択した理由は、**Crater プラットフォームの最小動作環境**に必要なキーポイントであり、それらがなければプラットフォームは正常に動作しません。**Prometheus/Grafana モニタリングスタック**、**MetalLB ロードバランサー**、**OpenEBS ストレージ**などの強力だが必須ではない依存は、最小バージョンから除外され、デプロイのハードルを下げています。
 
@@ -68,17 +68,17 @@ helm install crater oci://ghcr.io/raids-lab/crater --values values.yaml
 
 | コンポーネント           | 目的                          |
 | ------------------- | -------------------------------- |
-| NVIDIA GPU Operator | GPUデバイスプラグインとモニタリング |
-| Bitnami PostgreSQL  | PostgreSQLデータベースサービス       |
-| IngressClass        | Ingressトラフィックルーティング         |
+| NVIDIA GPU Operator | GPU デバイスプラグインとモニタリング |
+| Bitnami PostgreSQL  | PostgreSQL データベースサービス       |
+| IngressClass        | Ingress トラフィックルーティング         |
 | Volcano             | ベースジョブスケジューリングフレームワーク    |
 | StorageClass (NFS)  | 分散ストレージバックエンド            |
 
 ### IngressClass
 
-本番クラスターでは、ロードバランサー（例: MetalLB）と Ingress コントローラーを併用するのが一般的です。しかし、最小デプロイメントのケースでは、クラスター内のサービスに外部リクエストをルーティングするための **Ingress-Nginx コントローラー** のみが必要です。これにより、ネットワークプラグインやロードバランサー機能への追加の依存を避けることができます。
+本番クラスターでは、ロードバランサー（例：MetalLB）と Ingress コントローラーを併用するのが一般的です。しかし、最小デプロイメントのケースでは、クラスター内のサービスに外部リクエストをルーティングするための **Ingress-Nginx コントローラー** のみが必要です。これにより、ネットワークプラグインやロードバランサー機能への追加の依存を避けることができます。
 
-Helmを使用して Ingress-Nginx コントローラーを直接デプロイできます：
+Helm を使用して Ingress-Nginx コントローラーを直接デプロイできます：
 
 ```
 # 公式リポジトリを追加
@@ -92,7 +92,7 @@ helm install ingress-nginx ingress-nginx/ingress-nginx \
 
 ### Volcano
 
-Craterのタスクの実行とスケジューリングは、Volcanoが提供するバッチ計算スケジューリング機能に依存しています。VolcanoはAI/ビッグデータのシナリオに最適化されており、キュー、優先度、Gangスケジューリングなどの機能をサポートしています。最小限のデプロイメント環境においても、Volcanoは不可欠なコアコンポーネントであり、これをなしにするとCraterはタスクのスケジューリングや実行ができません。
+Crater のタスクの実行とスケジューリングは、Volcano が提供するバッチ計算スケジューリング機能に依存しています。Volcano は AI/ビッグデータのシナリオに最適化されており、キュー、優先度、Gang スケジューリングなどの機能をサポートしています。最小限のデプロイメント環境においても、Volcano は不可欠なコアコンポーネントであり、これをなしにすると Crater はタスクのスケジューリングや実行ができません。
 
 ### デプロイコマンド
 
@@ -109,7 +109,7 @@ helm upgrade --install volcano volcano-sh/volcano \
   -f volcano/values.yaml
 ```
 
-value.yaml 設定例: https://github.com/raids-lab/crater-backend/blob/main/deployments/volcano/values.yaml
+value.yaml 設定例：https://github.com/raids-lab/crater-backend/blob/main/deployments/volcano/values.yaml
 
 #### デプロイの確認
 
@@ -117,7 +117,7 @@ value.yaml 設定例: https://github.com/raids-lab/crater-backend/blob/main/depl
 kubectl get pods -n volcano-system
 ```
 
-正常に実行されているコンポーネント:
+正常に実行されているコンポーネント：
 
 - `volcano-scheduler`
 
@@ -130,9 +130,9 @@ kubectl get pods -n volcano-system
 
 ### StorageClass (NFS)
 
-NFSは分散ストレージバックエンドを提供し、HarborとCNPGのPVCはすべてこれに依存します。
+NFS は分散ストレージバックエンドを提供し、Harbor と CNPG の PVC はすべてこれに依存します。
 
-1. NFSサーバーでディレクトリを作成し、権限を設定します：
+1. NFS サーバーでディレクトリを作成し、権限を設定します：
 
    ```
    mkdir -p /srv/nfs/k8s
@@ -151,7 +151,7 @@ NFSは分散ストレージバックエンドを提供し、HarborとCNPGのPVC
    exportfs -rv
    ```
 
-4. K8sクラスターに **nfs-subdir-external-provisioner** をデプロイします：
+4. K8s クラスターに **nfs-subdir-external-provisioner** をデプロイします：
 
    ```
    helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
@@ -162,7 +162,7 @@ NFSは分散ストレージバックエンドを提供し、HarborとCNPGのPVC
      --set nfs.path=/srv/nfs/k8s
    ```
 
-5. StorageClassを確認します：
+5. StorageClass を確認します：
 
    ```
    kubectl get sc
@@ -175,12 +175,12 @@ NFSは分散ストレージバックエンドを提供し、HarborとCNPGのPVC
 
 ### CloudNativePG (CNPG)
 
-Kubernetesのステートフルコンポーネント（例: データベース、イメージリポジトリ）は、永続ストレージのサポートが必要です。最小デプロイバージョンでは、**NFSを統一された分散ストレージバックエンドとして選択**しています。それは設定が簡単で、互換性が良く、OpenEBSやCephなどの複雑なストレージシステムを追加でデプロイする必要がないからです。
-NFSから提供されるStorageClassを使用して、HarborとCNPGは直接PVCを要求し、永続ストレージを実現できます。この方法では、下層のストレージの詳細を気にすることなく、軽量かつリソースが限られた環境でも簡単に実装可能です。
+Kubernetes のステートフルコンポーネント（例：データベース、イメージリポジトリ）は、永続ストレージのサポートが必要です。最小デプロイバージョンでは、**NFS を統一された分散ストレージバックエンドとして選択**しています。それは設定が簡単で、互換性が良く、OpenEBS や Ceph などの複雑なストレージシステムを追加でデプロイする必要がないからです。
+NFS から提供される StorageClass を使用して、Harbor と CNPG は直接 PVC を要求し、永続ストレージを実現できます。この方法では、下層のストレージの詳細を気にすることなく、軽量かつリソースが限られた環境でも簡単に実装可能です。
 
-CNPGはHarborの外部データベース管理コンポーネントです。
+CNPG は Harbor の外部データベース管理コンポーネントです。
 
-1. Operatorをデプロイします：
+1. Operator をデプロイします：
 
    ```
    helm repo add cnpg https://cloudnative-pg.github.io/charts
@@ -188,7 +188,7 @@ CNPGはHarborの外部データベース管理コンポーネントです。
    helm install cnpg cnpg/cloudnative-pg --namespace cnpg-system --create-namespace
    ```
 
-2. データベースユーザーのパスワードSecretを作成します：
+2. データベースユーザーのパスワード Secret を作成します：
 
    ```
    kubectl -n cnpg-system create secret generic harbor-db-password \
@@ -221,7 +221,7 @@ CNPGはHarborの外部データベース管理コンポーネントです。
    kubectl apply -f harbor-pg.yaml -n cnpg-system
    ```
 
-4. CNPGを確認します：
+4. CNPG を確認します：
 
    ```
    kubectl -n cnpg-system get pods
@@ -243,15 +243,15 @@ CNPGはHarborの外部データベース管理コンポーネントです。
 ------
 
 
-### Harborのデプロイ
+### Harbor のデプロイ
 
-HarborはCraterプラットフォームに依存するイメージリポジトリです。内網やオフライン環境では、パブリックイメージリポジトリ（例: DockerHub、ghcr.io）がしばしばアクセス不能であるため、Craterのフロントエンドとバックエンド、および依存イメージを保存するためのプライベートリポジトリが必要になります。
-Harborを選択した理由は、**イメージ管理、権限制御、セキュリティスキャン**などの企業向け機能を備え、Kubernetesとネイティブに統合されているからです。最小限のデプロイ環境では、Harborは**NFSストレージ**と**CNPG外部データベース**にのみ依存し、Redis/Postgresの組み込みバージョンを追加で依存しなくなり、全体アーキテクチャを簡素化します。
-これにより、Craterのイメージをローカルで保存および配布でき、将来的な拡張（例: マルチユーザー、マルチプロジェクトのイメージ管理）に基礎を提供します。
+Harbor は Crater プラットフォームに依存するイメージリポジトリです。内網やオフライン環境では、パブリックイメージリポジトリ（例：DockerHub、ghcr.io）がしばしばアクセス不能であるため、Crater のフロントエンドとバックエンド、および依存イメージを保存するためのプライベートリポジトリが必要になります。
+Harbor を選択した理由は、**イメージ管理、権限制御、セキュリティスキャン**などの企業向け機能を備え、Kubernetes とネイティブに統合されているからです。最小限のデプロイ環境では、Harbor は**NFS ストレージ**と**CNPG 外部データベース**にのみ依存し、Redis/Postgres の組み込みバージョンを追加で依存しなくなり、全体アーキテクチャを簡素化します。
+これにより、Crater のイメージをローカルで保存および配布でき、将来的な拡張（例：マルチユーザー、マルチプロジェクトのイメージ管理）に基礎を提供します。
 
-Harborは上記の **NFS** ストレージと **CNPG 外部データベース** を使用します。
+Harbor は上記の **NFS** ストレージと **CNPG 外部データベース** を使用します。
 
-1. Chartをダウンロードします：
+1. Chart をダウンロードします：
 
    ```
    helm repo add harbor https://helm.goharbor.io
@@ -274,7 +274,7 @@ Harborは上記の **NFS** ストレージと **CNPG 外部データベース**
      externalURL: http://192.168.103.136:30002
      ```
 
-   - 外部データベースの使用:
+   - 外部データベースの使用：
 
      ```
      database:
@@ -287,7 +287,7 @@ Harborは上記の **NFS** ストレージと **CNPG 外部データベース**
          existingSecret: harbor-db-password
      ```
 
-   - PVCの指定:
+   - PVC の指定：
 
      ```
      persistence:
@@ -311,17 +311,17 @@ Harborは上記の **NFS** ストレージと **CNPG 外部データベース**
 | registry（distribution）  | `goharbor/registry-photon`      | `v2.12.0` | swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/goharbor/registry-photon:v2.12.0 |
 | registryctl               | `goharbor/harbor-registryctl`   | `v2.12.0` | swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/goharbor/harbor-registryctl:v2.12.0 |
 | trivy-adapter             | `goharbor/trivy-adapter-photon` | `v2.12.0` | swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/goharbor/trivy-adapter-photon:v2.12.1 |
-| database（組み込みPostgres） | `goharbor/harbor-db`            | `v2.12.0` | swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/goharbor/harbor-db:v2.12.0 |
-| redis（組み込みRedis）       | `goharbor/redis-photon`         | `v2.12.0` | swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/goharbor/redis-photon:v2.12.0 |
+| database（組み込み Postgres） | `goharbor/harbor-db`            | `v2.12.0` | swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/goharbor/harbor-db:v2.12.0 |
+| redis（組み込み Redis）       | `goharbor/redis-photon`         | `v2.12.0` | swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/goharbor/redis-photon:v2.12.0 |
 | exporter                  | `goharbor/harbor-exporter`      | `v2.12.0` | swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/goharbor/harbor-exporter:v2.12.0 |
 
-3. Harborをデプロイします：
+3. Harbor をデプロイします：
 
    ```
    helm install harbor . -n harbor-system --create-namespace -f values.yaml
    ```
 
-4. Podの状態を確認します：
+4. Pod の状態を確認します：
 
    ```
    kubectl -n harbor-system get pods
@@ -333,7 +333,7 @@ Harborは上記の **NFS** ストレージと **CNPG 外部データベース**
    - `harbor-jobservice` ✅
    - `harbor-portal`, `harbor-nginx`, `harbor-registry`, `harbor-redis`, `harbor-trivy` ✅
 
-5. Harborにアクセスします：
+5. Harbor にアクセスします：
 
    ブラウザでアクセスしてください
 
