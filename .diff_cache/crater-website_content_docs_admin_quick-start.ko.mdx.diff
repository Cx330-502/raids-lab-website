diff --git crater-website/content/docs/admin/quick-start.ko.mdx crater-website/content/docs/admin/quick-start.ko.mdx
index cfa5c7a..d061e1a 100644
--- crater-website/content/docs/admin/quick-start.ko.mdx
+++ crater-website/content/docs/admin/quick-start.ko.mdx
@@ -7,17 +7,17 @@ Crater 플랫폼은 Kubernetes 클러스터에 의존하여 작동하므로, 배
 
 최소 배포 방식에서는 최소한의 핵심 구성 요소만 유지하고, 추가 복잡성을 최소화하려고 노력합니다. 최종적으로 결정된 의존성은 다음과 같습니다:
 
-- **NVIDIA GPU Operator**: GPU 드라이버, 장치 플러그인 및 모니터링 구성 요소를 설치하여 Crater가 GPU 작업을 스케줄링할 수 있도록 합니다.
-- **Bitnami PostgreSQL**: 고가용성을 고려하지 않은 PostgreSQL 데이터베이스 서비스로, 이 경우 Crater의 외부 데이터베이스로 사용됩니다.
+- **NVIDIA GPU Operator**: GPU 드라이버, 장치 플러그인 및 모니터링 구성 요소를 설치하여 Crater 가 GPU 작업을 스케줄링할 수 있도록 합니다.
+- **Bitnami PostgreSQL**: 고가용성을 고려하지 않은 PostgreSQL 데이터베이스 서비스로, 이 경우 Crater 의 외부 데이터베이스로 사용됩니다.
 - **IngressClass (Ingress-Nginx)**: 외부 트래픽 라우팅을 처리하고, 사용자 요청을 클러스터 내부 서비스로 전달합니다.
-- **Volcano**: 배치 및 AI 워크로드를 위한 스케줄링 프레임워크로, Crater의 작업 스케줄링 핵심입니다.
-- **StorageClass (NFS)**: 데이터베이스 및 Harbor에 지속 가능한 저장을 위한 통합 분산 저장소 백엔드.
+- **Volcano**: 배치 및 AI 워크로드를 위한 스케줄링 프레임워크로, Crater 의 작업 스케줄링 핵심입니다.
+- **StorageClass (NFS)**: 데이터베이스 및 Harbor 에 지속 가능한 저장을 위한 통합 분산 저장소 백엔드.
 
 이러한 구성 요소를 선택한 이유는 **Crater 플랫폼의 최소 실행 환경**에 필수적인 핵심 지원 구성 요소이기 때문입니다. **Prometheus/Grafana 모니터링 스택**, **MetalLB 로드 밸런서**, **OpenEBS 저장소** 등 기능은 더 강력하지만 필수적이지 않으므로 최소 버전에서는 제외되어 배포 장벽을 낮춥니다.
 
 ## 설치
 
-### GitHub Container Registry에서 설치 (권장)
+### GitHub Container Registry 에서 설치 (권장)
 
 ```bash
 # Helm OCI 저장소 추가
@@ -76,9 +76,9 @@ helm install crater oci://ghcr.io/raids-lab/crater --values values.yaml
 
 ### IngressClass
 
-생산 클러스터에서는 일반적으로 로드 밸런서(예: MetalLB)와 Ingress 컨트롤러를 함께 사용합니다. 그러나 최소 배포 시나리오에서는 단순한 **Ingress-Nginx 컨트롤러**만 필요합니다. 외부 요청을 클러스터 내부 서비스로 라우팅할 뿐이며, 이는 하위 네트워크 플러그인 또는 로드 밸런서 기능에 대한 추가 의존성을 피합니다.
+생산 클러스터에서는 일반적으로 로드 밸런서 (예: MetalLB) 와 Ingress 컨트롤러를 함께 사용합니다. 그러나 최소 배포 시나리오에서는 단순한 **Ingress-Nginx 컨트롤러**만 필요합니다. 외부 요청을 클러스터 내부 서비스로 라우팅할 뿐이며, 이는 하위 네트워크 플러그인 또는 로드 밸런서 기능에 대한 추가 의존성을 피합니다.
 
-Helm을 통해 Ingress-Nginx 컨트롤러를 직접 설치할 수 있습니다:
+Helm 을 통해 Ingress-Nginx 컨트롤러를 직접 설치할 수 있습니다:
 
 ```
 # 공식 저장소 추가
@@ -92,7 +92,7 @@ helm install ingress-nginx ingress-nginx/ingress-nginx \
 
 ### Volcano
 
-Crater의 작업 실행 및 스케줄링은 Volcano가 제공하는 배치 컴퓨팅 스케줄링 기능에 의존합니다. Volcano는 AI/대규모 데이터 시나리오에 최적화되어 있으며, 대기열, 우선순위, Gang 스케줄링 등 기능을 지원합니다. 최소 배포 환경에서도 Volcano는 필수적인 핵심 구성 요소이며, 없으면 Crater는 작업을 스케줄링하거나 실행할 수 없습니다.
+Crater 의 작업 실행 및 스케줄링은 Volcano 가 제공하는 배치 컴퓨팅 스케줄링 기능에 의존합니다. Volcano 는 AI/대규모 데이터 시나리오에 최적화되어 있으며, 대기열, 우선순위, Gang 스케줄링 등 기능을 지원합니다. 최소 배포 환경에서도 Volcano 는 필수적인 핵심 구성 요소이며, 없으면 Crater 는 작업을 스케줄링하거나 실행할 수 없습니다.
 
 ### 설치 명령
 
@@ -129,7 +129,7 @@ kubectl get pods -n volcano-system
 
 ### StorageClass (NFS)
 
-NFS는 분산 저장소 백엔드를 제공하며, Harbor 및 CNPG의 PVC가 이에 의존합니다.
+NFS 는 분산 저장소 백엔드를 제공하며, Harbor 및 CNPG 의 PVC 가 이에 의존합니다.
 
 1. NFS 서버에서 디렉터리 생성 및 권한 설정:
 
@@ -173,9 +173,9 @@ NFS는 분산 저장소 백엔드를 제공하며, Harbor 및 CNPG의 PVC가 이
 
 ### CloudNativePG (CNPG)
 
-Kubernetes의 상태 기반 구성 요소(예: 데이터베이스, 이미지 저장소)는 지속 가능한 저장소 지원이 필요합니다. 최소 배포 버전에서는 **NFS를 통합 분산 저장소 백엔드로 선택**합니다. 왜냐하면 설정이 간단하고 호환성이 좋으며, OpenEBS, Ceph 등의 복잡한 저장소 시스템을 추가 설치할 필요가 없기 때문입니다. NFS를 통해 제공된 StorageClass를 통해 Harbor 및 CNPG는 PVC를 직접 요청하여 지속 가능한 저장소를 사용할 수 있으며, 하위 저장소 세부 사항에 대해 걱정할 필요가 없습니다. 이는 경량화 및 자원 제한된 환경에 특히 적합합니다.
+Kubernetes 의 상태 기반 구성 요소 (예: 데이터베이스, 이미지 저장소) 는 지속 가능한 저장소 지원이 필요합니다. 최소 배포 버전에서는 **NFS 를 통합 분산 저장소 백엔드로 선택**합니다. 왜냐하면 설정이 간단하고 호환성이 좋으며, OpenEBS, Ceph 등의 복잡한 저장소 시스템을 추가 설치할 필요가 없기 때문입니다. NFS 를 통해 제공된 StorageClass 를 통해 Harbor 및 CNPG 는 PVC 를 직접 요청하여 지속 가능한 저장소를 사용할 수 있으며, 하위 저장소 세부 사항에 대해 걱정할 필요가 없습니다. 이는 경량화 및 자원 제한된 환경에 특히 적합합니다.
 
-CNPG는 Harbor 외부 데이터베이스 관리 구성 요소입니다.
+CNPG 는 Harbor 외부 데이터베이스 관리 구성 요소입니다.
 
 1. Operator 설치:
 
@@ -227,7 +227,7 @@ CNPG는 Harbor 외부 데이터베이스 관리 구성 요소입니다.
 
    다음을 확인해야 합니다:
 
-   - `harbor-pg-1` Pod이 실행 중
+   - `harbor-pg-1` Pod 이 실행 중
    - `harbor-pg-rw` 서비스가 5432 포트를 제공
 
 5. 데이터베이스에 로그인하여 테스트:
@@ -241,9 +241,9 @@ CNPG는 Harbor 외부 데이터베이스 관리 구성 요소입니다.
 
 ### Harbor 설치
 
-Harbor는 Crater 플랫폼에 의존하는 이미지 저장소입니다. 내부망 또는 오프라인 환경에서는 공용 이미지 저장소(예: DockerHub, ghcr.io)에 접근할 수 없기 때문에, Crater의 전후단 및 의존 이미지를 저장하기 위해 사설 저장소가 필요합니다. Harbor를 선택한 이유는 **이미지 관리, 권한 제어, 보안 스캔** 등 기업 수준의 기능을 제공하면서 Kubernetes와 원적합하게 통합될 수 있기 때문입니다. 최소 배포 환경에서는 Harbor가 **NFS 저장소**와 **CNPG 외부 데이터베이스**만으로 실행될 수 있도록 Redis/Postgres 내장 버전을 제거하여 전체 아키텍처를 간소화합니다. 이는 Crater의 이미지가 로컬에서 저장되고 분산될 수 있도록 보장하면서, 향후 확장(예: 다중 사용자, 다중 프로젝트 이미지 관리)을 위한 기초를 제공합니다.
+Harbor 는 Crater 플랫폼에 의존하는 이미지 저장소입니다. 내부망 또는 오프라인 환경에서는 공용 이미지 저장소 (예: DockerHub, ghcr.io) 에 접근할 수 없기 때문에, Crater 의 전후단 및 의존 이미지를 저장하기 위해 사설 저장소가 필요합니다. Harbor 를 선택한 이유는 **이미지 관리, 권한 제어, 보안 스캔** 등 기업 수준의 기능을 제공하면서 Kubernetes 와 원적합하게 통합될 수 있기 때문입니다. 최소 배포 환경에서는 Harbor 가 **NFS 저장소**와 **CNPG 외부 데이터베이스**만으로 실행될 수 있도록 Redis/Postgres 내장 버전을 제거하여 전체 아키텍처를 간소화합니다. 이는 Crater 의 이미지가 로컬에서 저장되고 분산될 수 있도록 보장하면서, 향후 확장 (예: 다중 사용자, 다중 프로젝트 이미지 관리) 을 위한 기초를 제공합니다.
 
-Harbor는 위에서 설명한 **NFS** 저장소와 **CNPG 외부 데이터베이스**를 사용합니다.
+Harbor 는 위에서 설명한 **NFS** 저장소와 **CNPG 외부 데이터베이스**를 사용합니다.
 
 1. Chart 다운로드:
 
