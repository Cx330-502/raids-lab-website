# ==============================================================================
#  Workflow: Smart Automatic i18n Translation (v4 - Production Ready)
#
#  Features:
#  - Uses a dedicated GitHub App for secure, isolated authentication.
#  - Prevents recursive workflow runs by checking the commit message.
#  - Employs a "three-dot diff" to precisely identify PR-specific changes.
# ==============================================================================

name: Smart Automatic i18n Translation

on:
  push:
    branches:
      - main
    paths:
      - 'crater-website/content/docs/**'
      - 'crater-website/messages/**'
      - 'crater-website/src/i18n/config.ts'
      - '.github/workflows/auto-translate.yml'
  pull_request:
    types:
      - labeled

jobs:
  auto-translate:
    # 通过检查最后一次的 commit message 来防止工作流被自己的提交所触发，这是最简单可靠的方式。
    if: "!startsWith(github.event.head_commit.message, 'chore(i18n):')"

    runs-on: self-hosted
    steps:
      # 步骤 1: 使用 GitHub App 的 ID 和私钥生成一个短期有效的安装令牌
      - name: 🔐 Generate a token
        id: generate-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      # 步骤 2: 使用 App 生成的令牌检出代码
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      # 步骤 3: 设置 Python 环境并安装依赖
      - name: 🐍 Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦 Install dependencies
        run: pip install requests

      # 步骤 4: 智能确定需要处理的文件并为每个文件生成 Diff
      - name: ⚙️ Determine Files & Generate Diffs
        id: files-to-process
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            BASE_REF="${{ github.event.before }}"
            HEAD_REF="${{ github.event.after }}"
          else # pull_request
            BASE_REF="origin/${{ github.base_ref }}"
            HEAD_REF="origin/${{ github.head_ref }}"
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }} --no-tags
          fi
          
          # 使用三点 diff (`...`) 精确找出本次事件独有的变更
          FILES_TO_PROCESS=$(git diff --name-only --diff-filter=AMR $BASE_REF...$HEAD_REF)

          if [[ -z "$FILES_TO_PROCESS" ]]; then
            echo "No new or modified files unique to this event were detected. Workflow will stop."
            echo "has_files=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "has_files=true" >> $GITHUB_OUTPUT
          echo "Files to process:"
          echo "$FILES_TO_PROCESS"
          
          # 创建用于存放 diff 的临时目录
          mkdir -p .diff_cache

          # 为每个被修改的文件(Modified/Renamed)生成 diff
          MODIFIED_FILES=$(git diff --name-only --diff-filter=MR $BASE_REF...$HEAD_REF)
          for file in $MODIFIED_FILES; do
            # 将文件路径中的 / 替换为 _，作为 diff 文件名
            diff_filename=$(echo "$file" | tr '/' '_')
            git diff --no-prefix $BASE_REF...$HEAD_REF -- "$file" > ".diff_cache/${diff_filename}.diff"
            echo "  - Created diff for $file"
          done

          # 将文件列表转换为逗号分隔的参数
          FILES_TO_PROCESS_ARG=$(echo "$FILES_TO_PROCESS" | tr '\n' ',' | sed 's/,$//')
          echo "files=${FILES_TO_PROCESS_ARG}" >> $GITHUB_OUTPUT

      # 步骤 5: 运行引导脚本，传入变更文件列表
      - name: 🚀 Run Translation Bootstrap Script
        if: steps.files-to-process.outputs.has_files == 'true'
        run: |
          python crater-website/hack/i18n/bootstrap.py --changed-files "${{ steps.files-to-process.outputs.files }}"

      # 步骤 6: 使用 App 身份创建包含翻译结果的 Pull Request
      - name: 🤖 Create Pull Request with Translations
        if: steps.files-to-process.outputs.has_files == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: "chore(i18n): 自动同步多语言翻译"
          title: "🌐 [Auto-Translate] 同步多语言文件"
          body: |
            由 **${{ secrets.APP_NAME }}** 机器人根据最新变更自动同步翻译。
            
            **触发事件:** `${{ github.event_name }}`
            
            *此 PR 只包含本次事件中独有的变更，已智能排除合并主干所引入的 commits。*
          branch: "feature/auto-translate-${{ github.run_id }}"
          delete-branch: true
          labels: "i18n, automated"
          # 使用 App 的信息作为作者，让 commit 历史清晰可辨
          author: ${{ secrets.APP_NAME }}[bot] <${{ secrets.APP_ID }}+${{ secrets.APP_NAME }}[bot]@users.noreply.github.com>
          committer: ${{ secrets.APP_NAME }}[bot] <${{ secrets.APP_ID }}+${{ secrets.APP_NAME }}[bot]@users.noreply.github.com>